generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// ATURAN UNTUK PENULISAN ///

model PartyData {
  //primary index, versioning di table sendiri
  dataId      String @id @map("data_id")
  ownerId     String @map("owner_id") //data owner
  dataTitle   String @map("data_title")
  dataVersion Int    @map("data_version")

  //data definition
  dataObjectPath String            @map("data_object_path")
  rootSchemaId   String            @map("root_schema_id")
  dataTags       String[]          @map("data_tags")
  dataType       EnumPartyDataType @map("data_type")

  //data permission
  dataPermissionLevel EnumPermissionLevel @default(private) @map("data_permission_level")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(3)

  //relations
  dataOwner Party @relation(fields: [ownerId], references: [id])

  @@index([createdAt(ops: TimestampTzMinMaxMultiOps)], type: Brin, name: "party_datas_created_index")
  // @@id([ownerId, dataId], name: "party_data_id")
  @@index([ownerId], type: Hash, name: "party_datas_owner_index")
  // @@index([ownerId, dataPermissionLevel], type: Hash, name: "party_data_by_party_by_permission_index") // karena datanya bakalan berubah ubah
  @@map("party_data")
}

model DataMetaData {
  ////no indexing since we won't query this table
  dataId          String   @map("data_id")
  dataVersion     Int      @map("data_version")
  ownerName       String   @map("owner_name")
  dataTitle       String   @map("data_title")
  dataDescription String   @map("data_description")
  datatags        String   @map("data_tags")
  dataKeywords    String   @map("data_keywords")
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt       DateTime @default(now()) @map("updated_at") @db.Timestamptz(3)

  @@id([dataId, dataVersion], name: "data_metadatas_id")
  // @@index([schemaId, schemaType, schemaVersion], type: Hash, name: "schema_metadatas_index")
  @@map("data_metadatas")
}

model DataAttribution {
  dataId             String   @map("data_id")
  dataVersion        String   @map("data_version")
  revision           String
  canonicalHash      String   @map("canonical_hash")
  authorName         String   @map("author_name")
  authorOrganisation String   @map("author_organisation")
  authorEmail        String   @map("author_email")
  createdAt          DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt          DateTime @default(now()) @map("updated_at") @db.Timestamptz(3)

  @@id([dataId, dataVersion], name: "schema_attributions_id")
  // @@index([schemaId, schemaType, schemaVersion], type: Hash, name: "schema_attributions_index")
  @@map("data_attributions")
}

model DataVersioning {
  dataId                String   @map("data_id")
  dataVersion           String   @map("data_version")
  dataObjectDescription String   @map("data_object_description")
  signatureHash         String   @map("signature_hash")
  changeReason          String   @map("change_reason")
  createdAt             DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  createdBy             String   @map("created_by")

  @@id([dataId, dataVersion], name: "data_versionings_id")
  // @@index([schemaId, schemaType, schemaVersion], type: Hash, name: "schema_versionings_index")
  @@map("data_versionings")
}

model DataAccessRequest {
  id                String                @id
  requestFrom       String                @map("request_from")
  requestTo         String                @map("request_to")
  requestType       EnumRequestType       @map("request_type")
  accessRequestType EnumAccessRequestType @map("access_request_type")
  requestStatus     EnumRequestStatus     @map("request_status")
  dataId            String                @map("data_id")
  accessType        String                @map("access_type")
  accessExpired     DateTime?             @map("access_expired") @db.Timestamptz(3)
  version           Int
  createdAt         DateTime              @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt         DateTime              @default(now()) @map("updated_at") @db.Timestamptz(3)

  requestHistories DataAccessRequestHistory[]

  @@index([dataId], type: Hash, name: "data_access_requests_data_index")
  @@index([createdAt(ops: TimestampTzMinMaxMultiOps)], type: Brin, name: "data_access_requests_created_index")
  @@index([requestFrom(ops: TextMinMaxOps)], type: Brin, name: "data_access_requests_from_index")
  @@index([requestTo(ops: TextMinMaxOps)], type: Brin, name: "data_access_requests_to_index")
  @@index([accessExpired(ops: TimestampTzMinMaxMultiOps)], type: Brin, name: "data_access_requests_expired_index")
  @@map("data_access_requests")
}

model DataAccessRequestHistory {
  requestVersion Int      @map("request_version")
  requestId      String   @map("request_id")
  currentData    Json     @map("current_data")
  updateReasons  String[] @map("update_reasons")
  createdBy      String   @map("created_by")
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  dataAccessRequest DataAccessRequest @relation(fields: [requestId], references: [id])

  @@id([requestId, requestVersion], name: "data_access_request_histories_id")
  // @@index([requestId(ops: TextOps)], type: SpGist, name: "access_request_histories_by_request_index")
  @@map("data_access_request_histories")
}

//TODO: data type perlu didefinisikan ulang
enum EnumPartyDataType {
  identity
  identity_given
  diary
  diary_page
  party_relationship
}

enum EnumPermissionLevel {
  private
  public
  protected
}

model Party {
  id              String   @id
  partyName       String   @map("party_name")
  partyEmail      String   @map("party_email")
  partyBirthdate  DateTime @map("party_birthdate")
  partyParentName String   @map("party_parent_name")
  partyAddress    String   @map("party_address")
  // partyAttributes Json?    @map("partyAttributes")
  isVerified      Boolean  @default(false) @map("is_party_verified")
  isActive        Boolean  @default(true) @map("is_party_active")
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt       DateTime @default(now()) @map("updated_at") @db.Timestamptz(3)

  /// Enum
  partyType EnumPartyType @map("party_type")

  ///data section
  partyDatas  PartyData[]
  schemaOwned Schema[]

  // commented section
  // permissionGroups  String[]        @map("permission_groups")

  accounts PartyAccount[]

  // @@index([partyAttributes(ops: JsonbOps)], type: Gin, name: "parties_party_attributes_index") //belum perlu query party dari attributes harusnya
  @@unique([partyName, partyBirthdate, partyParentName], name: "party_by_attribute")
  @@map("parties")
}

model PartyAccount {
  partyId           String?  @map("party_id")
  accountProviderId String   @map("account_provider_id")
  accountId         String   @map("account_id")
  isActive          Boolean  @default(true) @map("is_party_active")
  createdAt         DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt         DateTime @default(now()) @map("updated_at") @db.Timestamptz(3)

  accountProvider AccountProvider @relation(fields: [accountProviderId], references: [id])
  party           Party?          @relation(fields: [partyId], references: [id])

  @@id([accountProviderId, accountId], name: "party_accounts_id")
  @@map("party_accounts")
}

enum EnumPartyType {
  personal
  organisation
}

// ----------------------- END PARTY REGION -------------------------- //

// ----------------------- BEGIN ACCOUNT REGION -------------------------- //

model AccountProvider {
  id                 String   @id
  providerName       String   @map("provider_name")
  providerAttributes Json     @map("provider_attributes")
  createdAt          DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt          DateTime @default(now()) @map("updated_at") @db.Timestamptz(3)
  isActive           Boolean  @default(false) @map("is_account_provider_active")

  partyAccounts PartyAccount[]

  @@map("account_providers")
}

// ----------------------- END ACCOUNT REGION -------------------------- //

// ----------------------- BEGIN SCHEMA REGION -------------------------- //
enum EnumSchemaType {
  ui
  data
  json
}

model Schema {
  id                    String
  schemaType            EnumSchemaType      @map("schema_type")
  schemaDataTypeId      String              @map("schema_data_type_id")
  schemaDataTypeName    String              @map("schema_data_type_name")
  ownerId               String              @map("owner_id")
  schemaPermissionLevel EnumPermissionLevel @default(private) @map("schema_permission_level")
  schemaTitle           String              @map("schema_title")
  schemaObjectPath      String              @map("schema_object_path")
  schemaVersion         Int                 @map("schema_version")
  createdAt             DateTime            @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt             DateTime            @default(now()) @map("updated_at") @db.Timestamptz(3)
  owner                 Party?              @relation(fields: [ownerId], references: [id])

  @@id([id, schemaType], name: "schemas_id")
  @@index([ownerId], type: Hash, name: "schemas_owner_index")
  // @@index([id, schemaType], type: Hash, name: "schema_main_index")
  @@map("schemas")
}

model SchemaMetaData {
  ////no indexing since we won't query this table
  schemaId          String         @map("schema_id")
  schemaType        EnumSchemaType @map("schema_type")
  schemaVersion     Int            @map("schema_version")
  ownerName         String         @map("owner_name")
  schemaTitle       String         @map("schema_title")
  schemaDescription String         @map("schema_description")
  schemaTags        String         @map("schema_tags")
  schemaKeywords    String         @map("schema_keywords")
  schemaPurpose     String         @map("schema_purpose")
  schemaUse         String         @map("schema_use")
  schemaMisuse      String         @map("schema_misuse")
  createdAt         DateTime       @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt         DateTime       @default(now()) @map("updated_at") @db.Timestamptz(3)

  @@id([schemaId, schemaType, schemaVersion], name: "schema_metadatas_id")
  // @@index([schemaId, schemaType, schemaVersion], type: Hash, name: "schema_metadatas_index")
  @@map("schema_metadatas")
}

model SchemaAttribution {
  schemaId           String         @map("schema_id")
  schemaType         EnumSchemaType @map("schema_type")
  schemaVersion      String         @map("schema_version")
  schemaUriId        String         @map("schema_uri_id")
  originalNamespace  String         @map("original_namespace")
  originalPublisher  String         @map("original_publisher")
  revision           String
  buildId            String         @map("build_id")
  majorVersionId     String         @map("major_version_id")
  canonicalHash      String         @map("canonical_hash")
  authorName         String         @map("author_name")
  authorOrganisation String         @map("author_organisation")
  authorEmail        String         @map("author_email")
  createdAt          DateTime       @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt          DateTime       @default(now()) @map("updated_at") @db.Timestamptz(3)

  @@id([schemaId, schemaType, schemaVersion], name: "schema_attributions_id")
  // @@index([schemaId, schemaType, schemaVersion], type: Hash, name: "schema_attributions_index")
  @@map("schema_attributions")
}

model SchemaVersioning {
  schemaId      String         @map("schema_id")
  schemaType    EnumSchemaType @map("schema_type")
  schemaVersion String         @map("schema_version")
  schemaObject  String         @map("schema_object_definition")
  signatureHash String         @map("signature_hash")
  changeReason  String         @map("change_reason")
  createdAt     DateTime       @default(now()) @map("created_at") @db.Timestamptz(3)
  createdBy     String         @map("created_by")

  @@id([schemaId, schemaType, schemaVersion], name: "schema_versionings_id")
  // @@index([schemaId, schemaType, schemaVersion], type: Hash, name: "schema_versionings_index")
  @@map("schema_versionings")
}

model SchemaAccessRequest {
  id                String                @id
  requestFrom       String                @map("request_from")
  requestTo         String                @map("request_to")
  requestType       EnumRequestType       @map("request_type")
  accessRequestType EnumAccessRequestType @map("access_request_type")
  requestStatus     EnumRequestStatus     @map("request_status")
  schemaId          String                @map("schema_id")
  schemaType        EnumSchemaType        @map("schema_type")
  accessType        String                @map("access_type")
  accessExpired     DateTime?             @map("access_expired") @db.Timestamptz(3)
  version           Int
  createdAt         DateTime              @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt         DateTime              @default(now()) @map("updated_at") @db.Timestamptz(3)

  requestHistories SchemaAccessRequestHistory[]

  @@unique([schemaId, schemaType], name: "schemas_access_requests_unique")
  @@index([createdAt(ops: TimestampTzMinMaxMultiOps)], type: Brin, name: "schema_access_request_created_index")
  @@index([requestFrom(ops: TextMinMaxOps)], type: Brin, name: "schema_access_request_from_index")
  @@index([requestTo(ops: TextMinMaxOps)], type: Brin, name: "schema_access_request_to_index")
  @@index([accessExpired(ops: TimestampTzMinMaxMultiOps)], type: Brin, name: "schema_access_request_expired_index")
  @@map("schema_access_requests")
}

model SchemaAccessRequestHistory {
  requestVersion Int      @map("request_version")
  requestId      String   @map("request_id")
  currentData    Json     @map("current_data")
  updateReasons  String[] @map("update_reasons")
  createdBy      String   @map("created_by")
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  schemaAccessRequest SchemaAccessRequest @relation(fields: [requestId], references: [id])
  dataAccessRequestId String?

  @@id([requestId, requestVersion], name: "schema_access_request_histories_id")
  // @@index([requestId(ops: TextOps)], type: SpGist, name: "access_request_histories_by_request_index")
  @@map("schema_access_request_histories")
}

enum EnumRequestStatus {
  requested
  approved
  rejected
  revision_submitted
  cancelled
}

enum EnumRequestType {
  grant_permission
  deny_permission
}

enum EnumAccessRequestType {
  viewer
  commenter
  editor
}

// ----------------------- END SCHEMA REGION -------------------------- //
